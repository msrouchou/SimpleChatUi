@page "/"

<h1>Chat with Bot</h1>

<div class="chat-container" @ref="chatContainer">
    @if (_chatHistory.Count > 0)
    {
        @foreach (var entry in BuildChatSequence())
        {
            <div class="chat-message-container">
                <span class="chat-message-header bi bi-person" aria-hidden="true"></span> You
                <div class="chat-message user-prompt">@entry.UserMessage</div>
            </div>
            if (!string.IsNullOrEmpty(entry.BotMessage))
            {
                <div class="chat-message-container">
                    <span class="chat-message-header bi bi-robot" aria-hidden="true"></span> Assistant
                    <div class="chat-message bot-answer">@entry.BotMessage</div>
                </div>
            }
        }
    }
</div>

<div class="input-container">
    <input @bind="_userMessage" @onkeyup="HandleKeyPress" />
    <button @onclick="SendMessage">Send</button>
</div>

@code {
    private enum Sender
    {
        User,
        Bot,
    }

    private Dictionary<Sender, List<string>> _chatHistory = new();
    private string _userMessage = "";

    private ElementReference chatContainer;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userMessage))
            return;

        DisplayUserPrompt();

        await DisplayBotAnswer();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void DisplayUserPrompt()
    {
        AddMessageToHistory(Sender.User, _userMessage);
    }

    private Random rnd = new Random();

    private async Task DisplayBotAnswer()
    {
        var chunks = EchoBot.GetAnswer(_userMessage, 10);

        // clear UI input
        _userMessage = "";

        for (int i = 0; i < chunks.Count; i++)
        {
            var chunk = chunks[i];
            if (i == 0)
            {
                AddMessageToHistory(Sender.Bot, chunk);
            }
            else
            {
                // keep updating the last answer while streaming chunks
                var currentAnswer = _chatHistory[Sender.Bot].Last();
                currentAnswer += chunk;
                _chatHistory[Sender.Bot][_chatHistory[Sender.Bot].Count - 1] = currentAnswer;
            }

            StateHasChanged();
            await Task.Delay(rnd.Next(10, 1500));
        }
    }

    private void AddMessageToHistory(Sender sender, string message)
    {
        if (_chatHistory.TryGetValue(sender, out var userMessages))
        {
            _chatHistory[sender].Add(message);
        }
        else
        {
            _chatHistory.Add(sender, [message]);
        }
    }

    private IEnumerable<dynamic> BuildChatSequence()
    {
        var userMessages = _chatHistory.ContainsKey(Sender.User) ? _chatHistory[Sender.User] : new List<string>();
        var botMessages = _chatHistory.ContainsKey(Sender.Bot) ? _chatHistory[Sender.Bot] : new List<string>();

        var chatSequence = userMessages.Zip(botMessages.DefaultIfEmpty(), (user, bot) => new { UserMessage = user, BotMessage = bot ?? string.Empty });
        return chatSequence;
    }
}
